# app/services/robot_mover.py
from __future__ import annotations

import asyncio
import random
import uuid
from datetime import datetime, timezone, timedelta
from concurrent.futures import ThreadPoolExecutor
from typing import Dict, List, Tuple

from sqlalchemy import select
from sqlalchemy.ext.asyncio import (
    AsyncSession,
    async_sessionmaker,
    create_async_engine,
)
from sqlalchemy.orm import selectinload

from app.core.config import settings
from app.ws.ws_manager import EVENTS  # janus queue: –¥–ª—è WS-—Å–æ–±—ã—Ç–∏–π
from app.models.warehouse import Warehouse
from app.models.robot import Robot
from app.models.product import Product
from app.models.inventory_history import InventoryHistory


# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞—Ä—è–¥–∫–∏/—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
CHARGE_DURATION = timedelta(seconds=60)
SCAN_DURATION = timedelta(seconds=10)
DOCK_ROW = 0           # —Å—Ç—Ä–æ–∫–∞ –¥–æ–∫-—Å—Ç–∞–Ω—Ü–∏–∏
DOCK_SHELF_STR = "A"   # –ø–æ–ª–∫–∞ –¥–æ–∫-—Å—Ç–∞–Ω—Ü–∏–∏ (–∫–∞–∫ –±—É–∫–≤–∞)

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ø–∞–º—è—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
_TARGETS: Dict[str, Tuple[int, int]] = {}         # robot_id -> (goal_x, goal_y_num)  (y: 1..26)
_BATT_ACCUM: Dict[str, float] = {}                # robot_id -> –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–∞—è –¥—Ä–æ–±–Ω–∞—è "—Å—Ç–æ–∏–º–æ—Å—Ç—å" —à–∞–≥–æ–≤
_CHARGING_UNTIL: Dict[str, datetime] = {}         # robot_id -> –∫–æ–Ω–µ—Ü –∑–∞—Ä—è–¥–∫–∏ (UTC)
_SCANNING_UNTIL: Dict[str, datetime] = {}         # robot_id -> –∫–æ–Ω–µ—Ü —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (UTC)
_SCANNING_TARGET: Dict[str, Tuple[int, int]] = {} # robot_id -> (x, y_num) –∫–ª–µ—Ç–∫–∞, –∫–æ—Ç–æ—Ä—É—é —Å–∫–∞–Ω–∏—Ä—É–µ–º


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä—ã –ø–æ–ª–æ–∫
def shelf_str_to_num(s: str | None) -> int:
    #'A'->1, 'B'->2, ... 'Z'->26. –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ -> 1.
    if not s:
        return 1
    c = s.strip().upper()[:1]
    if "A" <= c <= "Z":
        return (ord(c) - ord("A")) + 1
    return 1

#1->'A', ..., 26->'Z'. –í–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –ø—Ä–∏–∂–∏–º–∞–µ–º –∫ [1..26].
def shelf_num_to_str(n: int) -> str:
    n = max(1, min(26, int(n or 1)))
    return chr(ord("A") + (n - 1))

# –§–∞–±—Ä–∏–∫–∞ —Å–µ—Å—Å–∏–π
def _make_session_factory() -> async_sessionmaker[AsyncSession]:
    engine = create_async_engine(settings.DB_URL, echo=False, future=True)
    return async_sessionmaker(engine, expire_on_commit=False, class_=AsyncSession)

# –£—Ç–∏–ª–∏—Ç—ã –¥–≤–∏–∂–µ–Ω–∏—è
def _bounded(v: int, lo: int, hi: int) -> int:
    return max(lo, min(hi, v))

#–°–ª—É—á–∞–π–Ω–∞—è –Ω–æ–≤–∞—è —Ü–µ–ª—å (x: 0..max_x, y_num: 1..max_y_num), –Ω–µ —Ä–∞–≤–Ω–∞—è —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏.
def _pick_new_goal(max_x: int, max_y_num: int, start: Tuple[int, int]) -> Tuple[int, int]:
    while True:
        gx = random.randint(0, max_x)
        gy = random.randint(1, max_y_num)
        if (gx, gy) != start:
            return gx, gy

#–û–î–ò–ù —à–∞–≥ –ø–æ –º–∞–Ω—Ö—ç—Ç—Ç–µ–Ω—É; –¥–ª—è Y —Ä–∞–±–æ—Ç–∞–µ–º –≤ —á–∏—Å–ª–∞—Ö (1..26).
def _next_step_towards(start: Tuple[int, int], goal: Tuple[int, int]) -> Tuple[int, int]:
    sx, sy = start
    gx, gy = goal
    dx = gx - sx
    dy = gy - sy
    if dx == 0 and dy == 0:
        return start
    choices: List[Tuple[int, int]] = []
    if dx != 0:
        choices.append((sx + (1 if dx > 0 else -1), sy))
    if dy != 0:
        choices.append((sx, sy + (1 if dy > 0 else -1)))
    return random.choice(choices)

# –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—Ö–æ–¥ –±–∞—Ç–∞—Ä–µ–∏ –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º —Å–∫–ª–∞–¥–∞
def _battery_drop_per_step(row_x: int, row_y: int) -> float:
    #–ù–∞ –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ö–æ–¥ row_x * row_y —à–∞–≥–æ–≤ —Ç—Ä–∞—Ç–∏–º 100%.
    rx = max(1, int(row_x or 1))
    ry = max(1, int(row_y or 1))
    steps = rx * ry
    return 100.0 / steps

#–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ö–µ–º–∞: –∞–∫–∫—É–º—É–ª–∏—Ä—É–µ–º –¥—Ä–æ–±—å –¥–æ —Ü–µ–ª–æ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞.
def _consume_battery(robot: Robot, row_x: int, row_y: int) -> None:
    acc = _BATT_ACCUM.get(robot.id, 0.0) + _battery_drop_per_step(row_x, row_y)
    drop = int(acc // 1.0)
    if drop > 0:
        new_level = max(0, (robot.battery_level or 0) - drop)
        if new_level != robot.battery_level:
            robot.battery_level = new_level
        acc -= drop
    _BATT_ACCUM[robot.id] = acc

# –ó–∞—Ä—è–¥–∫–∞
def _begin_charging(robot: Robot) -> None:
    robot.current_row = DOCK_ROW
    robot.current_shelf = DOCK_SHELF_STR  # –±—É–∫–≤–∞
    robot.status = "charging"
    until = datetime.now(timezone.utc) + CHARGE_DURATION
    _CHARGING_UNTIL[robot.id] = until

    EVENTS.sync_q.put({
        "type": "robot.dock",
        "ts": datetime.now(timezone.utc).isoformat(),
        "warehouse_id": robot.warehouse_id,
        "robot_id": robot.id,
        "x": robot.current_row,
        "y": shelf_str_to_num(robot.current_shelf),   
        "shelf": robot.current_shelf,                 
        "battery_level": robot.battery_level or 0,
        "status": robot.status,
        "charging_until": until.isoformat(),
    })
    EVENTS.sync_q.put({
        "type": "robot.charging",
        "ts": datetime.now(timezone.utc).isoformat(),
        "warehouse_id": robot.warehouse_id,
        "robot_id": robot.id,
        "x": robot.current_row,
        "y": shelf_str_to_num(robot.current_shelf),
        "shelf": robot.current_shelf,
        "battery_level": robot.battery_level or 0,
        "status": robot.status,
        "charging_until": until.isoformat(),
    })

def _maybe_finish_charging(robot: Robot) -> bool:
    if robot.status == "charging":
        until = _CHARGING_UNTIL.get(robot.id)
        now = datetime.now(timezone.utc)
        if until and now >= until:
            robot.battery_level = 100
            robot.status = "idle"
            _BATT_ACCUM[robot.id] = 0.0
            _CHARGING_UNTIL.pop(robot.id, None)
            EVENTS.sync_q.put({
                "type": "robot.charged",
                "ts": now.isoformat(),
                "warehouse_id": robot.warehouse_id,
                "robot_id": robot.id,
                "x": robot.current_row,
                "y": shelf_str_to_num(robot.current_shelf),
                "shelf": robot.current_shelf,
                "battery_level": robot.battery_level,
                "status": robot.status,
            })
            return True
    return False

# –†–∞–±–æ—Ç–∞ —Å–æ stock/status –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
def _status_by_stock(stock: int, min_stock: int | None, optimal_stock: int | None) -> str:
    m = min_stock if isinstance(min_stock, int) else None
    o = optimal_stock if isinstance(optimal_stock, int) else None
    if m is not None and stock < m:
        return "critical"
    if o is not None and stock < o:
        return "low"
    return "ok"

def _recalculate_stock_for_scan(p: Product) -> int:
    """–≠–º—É–ª—è—Ü–∏—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏."""
    if getattr(p, "stock", None) is None:
        base = p.optimal_stock if isinstance(p.optimal_stock, int) else 0
        return max(0, base)
    delta = random.randint(0, 2)
    return max(0, int(p.stock) - delta)

# –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ + –∑–∞–ø–∏—Å—å –∏—Å—Ç–æ—Ä–∏–∏ + WS (—Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è)
async def _scan_cell_for_products_and_log(
    session: AsyncSession,
    warehouse_id: str,
    x: int,
    y_num: int,       
    robot_id: str,
) -> None:
    shelf_letter = shelf_num_to_str(y_num) 
    result = await session.execute(
        select(Product).where(
            Product.warehouse_id == warehouse_id,
            Product.current_row == x,
            Product.current_shelf == shelf_letter,
        )
    )
    products = list(result.scalars().all())
    if not products:
        print(f"üü¶ [SCAN] No products at ({x},{shelf_letter}) in warehouse {warehouse_id} by robot {robot_id}")
        return

    now = datetime.now(timezone.utc).isoformat()
    history_rows: List[InventoryHistory] = []
    payload_products: List[dict] = []

    for p in products:
        # 1) –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞ (—ç–º—É–ª—è—Ü–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏)
        new_stock = _recalculate_stock_for_scan(p)
        p.stock = new_stock  # <-- –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ Product
        # 2) –≤—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ min/optimal
        st = _status_by_stock(new_stock, p.min_stock, p.optimal_stock)

        # 3) –ø–∏—à–µ–º —Å—Ç—Ä–æ–∫—É –≤ –∏—Å—Ç–æ—Ä–∏—é (–≤–∫–ª—é—á–∞—è stock –∏ status)
        history_rows.append(
            InventoryHistory(
                id=str(uuid.uuid4()),
                product_id=p.id,
                robot_id=robot_id,
                warehouse_id=warehouse_id,
                current_zone=getattr(p, "current_zone", None),
                current_row=getattr(p, "current_row", x),
                current_shelf=shelf_letter,
                name=p.name,
                category=p.category,
                min_stock=p.min_stock,
                optimal_stock=p.optimal_stock,
                stock=new_stock,
                status=st,
            )
        )

        # 4) —Ñ–æ—Ä–º–∏—Ä—É–µ–º WS-–¥–∞–Ω–Ω—ã–µ
        payload_products.append({
            "id": p.id,
            "name": p.name,
            "category": p.category,
            "current_zone": getattr(p, "current_zone", None),
            "current_row": getattr(p, "current_row", x),
            "current_shelf": shelf_letter,   # —Å—Ç—Ä–æ–∫–æ–π, –∫–∞–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ products
            "shelf_num": y_num,              # –∏ —á–∏—Å–ª–æ–º ‚Äî —É–¥–æ–±–Ω–æ –¥–ª—è UI/–≥—Ä–∏–¥–æ–≤
            "min_stock": p.min_stock,
            "optimal_stock": p.optimal_stock,
            "stock": new_stock,
            "status": st,
        })

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è Product.stock –∏ –∏—Å—Ç–æ—Ä–∏—é
    session.add_all(history_rows)
    await session.flush()

    print(
        f"üîé [SCAN] Robot {robot_id} scanned {len(products)} product(s) at ({x},{shelf_letter}) "
        f"in warehouse {warehouse_id}: {[p.id for p in products]}"
    )

    # WS: –æ–¥–Ω–æ —Å–æ–±—ã—Ç–∏–µ —Å –±–∞—Ç—á–µ–º —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∏—Ö –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏/—Å—Ç–∞—Ç—É—Å–∞–º–∏
    EVENTS.sync_q.put({
        "type": "product.scan",
        "ts": now,
        "warehouse_id": warehouse_id,
        "robot_id": robot_id,
        "x": x,
        "y": y_num,
        "shelf": shelf_letter,
        "products": payload_products,
    })

# –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: –∑–∞–ø—É—Å–∫ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
def _begin_scanning(robot: Robot, x: int, y_num: int) -> None:
    #–°—Ç–∞—Ä—Ç 10-—Å–µ–∫—É–Ω–¥–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: —Å—Ç–∞—Ç—É—Å 'scanning', —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Ü–µ–ª—å –∫–ª–µ—Ç–∫–∏ (y –∫–∞–∫ —á–∏—Å–ª–æ).
    robot.status = "scanning"
    until = datetime.now(timezone.utc) + SCAN_DURATION
    _SCANNING_UNTIL[robot.id] = until
    _SCANNING_TARGET[robot.id] = (x, y_num)

    EVENTS.sync_q.put({
        "type": "robot.scanning_start",
        "ts": datetime.now(timezone.utc).isoformat(),
        "warehouse_id": robot.warehouse_id,
        "robot_id": robot.id,
        "x": x,
        "y": y_num,
        "shelf": shelf_num_to_str(y_num),
        "battery_level": robot.battery_level or 0,
        "status": robot.status,
        "scanning_until": until.isoformat(),
    })

#–ï—Å–ª–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å ‚Äî –ø–∏—à–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å 'idle'.
async def _maybe_finish_scanning(robot: Robot, session: AsyncSession) -> bool:
    if robot.status == "scanning":
        until = _SCANNING_UNTIL.get(robot.id)
        now = datetime.now(timezone.utc)
        if until and now >= until:
            tx, ty_num = _SCANNING_TARGET.get(
                robot.id,
                (robot.current_row, shelf_str_to_num(robot.current_shelf))
            )
            await _scan_cell_for_products_and_log(
                session,
                warehouse_id=robot.warehouse_id,
                x=tx,
                y_num=ty_num,
                robot_id=robot.id,
            )
            robot.status = "idle"
            _SCANNING_UNTIL.pop(robot.id, None)
            _SCANNING_TARGET.pop(robot.id, None)

            await session.flush()
            EVENTS.sync_q.put({
                "type": "robot.scanned_end",
                "ts": now.isoformat(),
                "warehouse_id": robot.warehouse_id,
                "robot_id": robot.id,
                "x": robot.current_row,
                "y": shelf_str_to_num(robot.current_shelf),
                "shelf": robot.current_shelf,
                "battery_level": robot.battery_level or 0,
                "status": robot.status,
            })
            return True
    return False

# –û–¥–∏–Ω —Ç–∏–∫ —Ä–æ–±–æ—Ç–∞
async def _move_robot_once(robot_id: str) -> str:
    session_factory = _make_session_factory()

    async with session_factory() as session:
        #—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è 1: –∑–∞—Ä—è–¥–∫–∞/—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ/–¥–≤–∏–∂–µ–Ω–∏–µ
        async with session.begin():
            result = await session.execute(
                select(Robot)
                .where(Robot.id == robot_id)
                .options(selectinload(Robot.warehouse))
            )
            robot: Robot | None = result.scalar_one_or_none()
            if not robot:
                return robot_id

            warehouse: Warehouse = robot.warehouse
            max_x = max(0, (warehouse.row_x or 1) - 1)
            max_y_num = max(1, min((warehouse.row_y or 1), 26))

            # –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –ª–∏ –∑–∞—Ä—è–¥–∫–∞?
            _maybe_finish_charging(robot)
            await session.flush()

            # –∑–∞—Ä—è–∂–∞–µ—Ç—Å—è ‚Äî —Å—Ç–æ–∏–º
            if robot.status == "charging":
                EVENTS.sync_q.put({
                    "type": "robot.position",
                    "ts": datetime.now(timezone.utc).isoformat(),
                    "warehouse_id": robot.warehouse_id,
                    "robot_id": robot.id,
                    "x": robot.current_row,
                    "y": shelf_str_to_num(robot.current_shelf),
                    "shelf": robot.current_shelf,
                    "battery_level": robot.battery_level or 0,
                    "status": robot.status,
                    "charging_until": _CHARGING_UNTIL.get(robot.id).isoformat() if _CHARGING_UNTIL.get(robot.id) else None,
                })
                print(f"‚ö° [Warehouse {robot.warehouse_id}] Robot {robot.id} charging at ({DOCK_ROW},{DOCK_SHELF_STR})")
                return robot_id

            # –∏–¥—ë—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ?
            _ = await _maybe_finish_scanning(robot, session)
            await session.flush()
            if robot.status == "scanning":
                EVENTS.sync_q.put({
                    "type": "robot.position",
                    "ts": datetime.now(timezone.utc).isoformat(),
                    "warehouse_id": robot.warehouse_id,
                    "robot_id": robot.id,
                    "x": robot.current_row,
                    "y": shelf_str_to_num(robot.current_shelf),
                    "shelf": robot.current_shelf,
                    "battery_level": robot.battery_level or 0,
                    "status": robot.status,
                    "scanning_until": _SCANNING_UNTIL.get(robot.id).isoformat() if _SCANNING_UNTIL.get(robot.id) else None,
                })
                print(f"üì° [Warehouse {robot.warehouse_id}] Robot {robot.id} scanning at "
                      f"({robot.current_row},{robot.current_shelf}) "
                      f"until={_SCANNING_UNTIL.get(robot.id)}")
                return robot_id

            # –±–∞—Ç–∞—Ä–µ—è 0 ‚Äî –Ω–∞ –∑–∞—Ä—è–¥–∫—É
            if (robot.battery_level or 0) <= 0:
                _begin_charging(robot)
                await session.flush()
                print(f"ü™´ [Warehouse {robot.warehouse_id}] Robot {robot.id} moved to dock ({DOCK_ROW},{DOCK_SHELF_STR}) for charging")
                return robot_id

            # –¥–≤–∏–∂–µ–Ω–∏–µ
            start_x = robot.current_row
            start_y_num = shelf_str_to_num(robot.current_shelf)
            start = (start_x, start_y_num)

            goal = _TARGETS.get(robot.id)
            if (
                goal is None
                or not (0 <= goal[0] <= max_x and 1 <= goal[1] <= max_y_num)
                or goal == start
            ):
                goal = _pick_new_goal(max_x, max_y_num, start)
                _TARGETS[robot.id] = goal

            next_x, next_y_num = _next_step_towards(start, goal)
            next_x = _bounded(next_x, 0, max_x)
            next_y_num = _bounded(next_y_num, 1, max_y_num)

            # —Ä–∞—Å—Ö–æ–¥ –±–∞—Ç–∞—Ä–µ–∏ –∑–∞ —à–∞–≥
            _consume_battery(robot, warehouse.row_x or 1, warehouse.row_y or 1)

            # —Ñ–∏–∫—Å–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            robot.current_row = next_x
            robot.current_shelf = shelf_num_to_str(next_y_num)  # –±—É–∫–≤–∞
            robot.status = robot.status or "idle"
            if (next_x, next_y_num) == goal:
                _TARGETS[robot.id] = _pick_new_goal(max_x, max_y_num, (next_x, next_y_num))

            # –µ—Å–ª–∏ –±–∞—Ç–∞—Ä–µ—è —É–ø–∞–ª–∞ –¥–æ 0 ‚Äî –∑–∞—Ä—è–¥–∫–∞
            if (robot.battery_level or 0) <= 0:
                _begin_charging(robot)
                await session.flush()
                print(f"ü™´ [Warehouse {robot.warehouse_id}] Robot {robot.id} moved to dock ({DOCK_ROW},{DOCK_SHELF_STR}) for charging")
                return robot_id

            # –ø–æ–∑–∏—Ü–∏—è –ø–æ—Å–ª–µ —à–∞–≥–∞
            await session.flush()
            print(
                f"ü§ñ [Warehouse {robot.warehouse_id}] Robot {robot.id} "
                f"({start_x},{shelf_num_to_str(start_y_num)}) ‚Üí ({next_x},{shelf_num_to_str(next_y_num)})  "
                f"goal=({goal[0]},{shelf_num_to_str(goal[1])})  battery={robot.battery_level}%"
            )
            EVENTS.sync_q.put({
                "type": "robot.position",
                "ts": datetime.now(timezone.utc).isoformat(),
                "warehouse_id": robot.warehouse_id,
                "robot_id": robot.id,
                "x": next_x,
                "y": next_y_num,                        # —á–∏—Å–ª–æ–≤–æ–π Y (1..26)
                "shelf": shelf_num_to_str(next_y_num),  # –±—É–∫–≤–µ–Ω–Ω—ã–π Y
                "battery_level": robot.battery_level or 0,
                "status": robot.status or "idle",
            })

        #—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è 2: –µ—Å–ª–∏ –Ω–∞ –∫–ª–µ—Ç–∫–µ –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã ‚Äî –°–¢–ê–†–¢ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (10 —Å–µ–∫)
        async with session.begin():
            if robot.status not in ("charging", "scanning"):
                cur_y_num = shelf_str_to_num(robot.current_shelf)
                cell_has_products = await _cell_has_products(session, robot.warehouse_id, robot.current_row, cur_y_num)
                if cell_has_products:
                    _begin_scanning(robot, robot.current_row, cur_y_num)
                    await session.flush()
                    EVENTS.sync_q.put({
                        "type": "robot.position",
                        "ts": datetime.now(timezone.utc).isoformat(),
                        "warehouse_id": robot.warehouse_id,
                        "robot_id": robot.id,
                        "x": robot.current_row,
                        "y": cur_y_num,
                        "shelf": robot.current_shelf,
                        "battery_level": robot.battery_level or 0,
                        "status": robot.status,
                        "scanning_until": _SCANNING_UNTIL.get(robot.id).isoformat(),
                    })

    return robot_id

# helper: –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –∫–ª–µ—Ç–∫–µ (Product.current_shelf = str)
async def _cell_has_products(session: AsyncSession, warehouse_id: str, x: int, y_num: int) -> bool:
    shelf_letter = shelf_num_to_str(y_num)
    result = await session.execute(
        select(Product.id).where(
            Product.warehouse_id == warehouse_id,
            Product.current_row == x,
            Product.current_shelf == shelf_letter,
        ).limit(1)
    )
    return result.scalar_one_or_none() is not None

# –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π —à–∞–≥ –≤—Å–µ—Ö —Ä–æ–±–æ—Ç–æ–≤ —Å–∫–ª–∞–¥–∞
def _run_in_thread(robot_id: str) -> str:
    return asyncio.run(_move_robot_once(robot_id))

async def move_all_robots_concurrently(
    warehouse_id: str,
    global_session_factory: async_sessionmaker[AsyncSession],
    *,
    max_workers: int = 8,
) -> List[str]:
    async with global_session_factory() as session:
        result = await session.execute(
            select(Robot.id).where(Robot.warehouse_id == warehouse_id)
        )
        robot_ids = list(result.scalars().all())

    if not robot_ids:
        return []

    done_ids: List[str] = []
    loop = asyncio.get_running_loop()

    with ThreadPoolExecutor(max_workers=max_workers) as executor:
        tasks = [loop.run_in_executor(executor, _run_in_thread, rid) for rid in robot_ids]
        for coro in asyncio.as_completed(tasks):
            try:
                rid = await coro
                done_ids.append(rid)
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏ –æ–¥–Ω–æ–≥–æ –∏–∑ —Ä–æ–±–æ—Ç–æ–≤: {e}")

    return done_ids

# –í–æ—Ç—á–µ—Ä
async def run_robot_watcher(interval: float = 5.0, max_workers: int = 8) -> None:
    from app.db.session import async_session

    print("üöÄ [async] Robot watcher started. (parallel, battery/charging, scanning, history/stock, shelf A..Z)")
    try:
        while True:
            async with async_session() as session:
                result = await session.execute(
                    select(Warehouse)
                    .join(Robot, Robot.warehouse_id == Warehouse.id)
                    .distinct()
                )
                warehouses = list(result.scalars().all())

            if not warehouses:
                print("‚åõ –†–æ–±–æ—Ç–æ–≤ –Ω–µ—Ç ‚Äî –∂–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è...")
            else:
                for wh in warehouses:
                    moved = await move_all_robots_concurrently(
                        wh.id, async_session, max_workers=max_workers
                    )
                    if moved:
                        print(f"‚úÖ –°–∫–ª–∞–¥ {wh.name} ({wh.id}) ‚Äî –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã —Ä–æ–±–æ—Ç—ã: {moved}")

            await asyncio.sleep(interval)

    except asyncio.CancelledError:
        print("\nüõë Robot watcher stopped.")
